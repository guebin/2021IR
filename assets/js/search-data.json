{
  
    
        "post0": {
            "title": "(2주차) 9월14일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/1) 벡터의 원소를 뽑는법, 메인플랏과 서브플랏, 주석이용법 . &#48289;&#53552;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . x&lt;-c(1,2,-2,4,5,-5,6) . print(x) . [1] 1 2 -2 4 5 -5 6 . &#50896;&#49548;&#46308;&#51032; &#48264;&#54840;&#47484; &#48520;&#47084;&#49436; &#48977;&#50500;&#45240;&#45796;. . - 첫 원소를 뽑고싶다. . print(x[1]) . [1] 1 . - 세번째 원소를 뽑고싶다. . print(x[3]) . [1] -2 . - 첫번째부터 세번째까지의 원소를 뽑고싶다. . print(x[1:3]) . [1] 1 2 -2 . print(x[c(1,2,3)]) . [1] 1 2 -2 . - 2,5,6 번째의 원소를 뽑고싶다면? . print(x[c(2,5,6)]) . [1] 2 5 -5 . - 3번째 원소를 제외하고 호출 . print(x[-3]) . [1] 1 2 4 5 -5 6 . - 3,4번째의 원소를 제외하고 호출 . print(x[c(-3,-4)]) . [1] 1 2 5 -5 6 . print(x[-(3:4)]) . [1] 1 2 5 -5 6 . &#50612;&#46496;&#54620; &#51312;&#44148;&#51012; &#51452;&#44256;, &#44536; &#51312;&#44148;&#50640; &#47564;&#51313;&#54616;&#45716; &#50896;&#49548; (&#54841;&#51008; &#47564;&#51313;&#54616;&#51648; &#50506;&#45716; &#50896;&#49548;)&#47484; &#48977;&#45716;&#48277; . x&lt;-c(1,2,-2,4,5,-5,6) print(x) . [1] 1 2 -2 4 5 -5 6 . - 양수인 원소를 뽑는법 . (1) 양수인지 스스로 판단 . (2) 양수라면 나간다. . print(x&gt;0) . [1] TRUE TRUE FALSE TRUE TRUE FALSE TRUE . - x&gt;0이 결과는 TRUE, FALSE가 포함된 벡터 . print(x[x&gt;0]) . [1] 1 2 4 5 6 . - 3보다 큰 원소를 뽑는 방법 . print(x[x&gt;3]) . [1] 4 5 6 . - 3번째 원소를 뽑아라. . array_ = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE) . print(array_) . [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE . print(x[array_]) . [1] -2 . - 값이 -2인 원소를 뽑아라. . print(x[x == -2]) . [1] -2 . - 응용예제 . x&lt;- c(1,2,3,4,5) y&lt;- x^2 . print(x) . [1] 1 2 3 4 5 . print(y) . [1] 1 4 9 16 25 . $y=x^2=9$가 되도록 만드는 $x$를 알려줘! . print(x[y==9]) . [1] 3 . &#44536;&#47548;&#51012; &#44536;&#47540; &#46412; &#44592;&#50613;&#54624; &#44163; . - 그림자체를 생성해주는 plot과 같은 명령이 있고, 생성된 그림에 덧붙여서만 그릴 수 있는 lines, points, abline 과 같은 함수가 있다. . - 생성된 그림에 덧붙여서 그릴 수 있는 함수들은 단독으로 쓸 수 없다. . x&lt;-1:60/10 print(x) . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y&lt;-sin(x) print(y) . [1] 0.09983342 0.19866933 0.29552021 0.38941834 0.47942554 0.56464247 [7] 0.64421769 0.71735609 0.78332691 0.84147098 0.89120736 0.93203909 [13] 0.96355819 0.98544973 0.99749499 0.99957360 0.99166481 0.97384763 [19] 0.94630009 0.90929743 0.86320937 0.80849640 0.74570521 0.67546318 [25] 0.59847214 0.51550137 0.42737988 0.33498815 0.23924933 0.14112001 [31] 0.04158066 -0.05837414 -0.15774569 -0.25554110 -0.35078323 -0.44252044 [37] -0.52983614 -0.61185789 -0.68776616 -0.75680250 -0.81827711 -0.87157577 [43] -0.91616594 -0.95160207 -0.97753012 -0.99369100 -0.99992326 -0.99616461 [49] -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744 -0.77276449 [55] -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666 -0.27941550 . - plot은 단독으로 그림을 만드는 함수, lines는 만들어진 그림에 덧붙이는 함수 . plot(x,y,type=&#39;l&#39;,col=&#39;red&#39;) lines(x,y^2,col=&#39;blue&#39;) . - lines를 먼저 사용하면 이미 만들어진 그림이 없는 상태이므로 error가 발생 . lines(x,y^2,type=&#39;l&#39;,col=&#39;red&#39;) plot(x,y,type=&#39;l&#39;,col=&#39;blue&#39;) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y^2, type = &#34;l&#34;, col = &#34;red&#34;) 2. lines.default(x, y^2, type = &#34;l&#34;, col = &#34;red&#34;) 3. plot.xy(xy.coords(x, y), type = type, ...) . - 다양한 명령어들 비교 . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 | plot(x,y)와 plot(x,y,col=&#39;red&#39;)를 비교해보기 | plot(x,y)와 lines(x,y**2)를 같이 그려보기 | plot(x,y)와 points(x,y**2)를 같이 그려보기 | . &#51452;&#49437;&#51060;&#50857;&#48169;&#48277; . - 사용법 . a&lt;- 1 a&lt;- a+1 a&lt;- a+1 print(a) . [1] 3 . a&lt;- 1 #a&lt;- a+1 a&lt;- a+1 print(a) . [1] 2 . - 왜 쓰는지? (1) 코드 test (2) 설명을 쓰고싶을때 . a&lt;- 1 # a에 1을 대입하라. #a&lt;- a+1 a&lt;- a+1 # a의 값을 1증가하라. print(a) . [1] 2 . &#49689;&#51228; . 아래의 4개중 하나를 골라 비교해보고 결과를 캡쳐하여 LMS에 제출 . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 | plot(x,y)와 plot(x,y,col=&#39;red&#39;)를 비교해보기 | plot(x,y)와 lines(x,y**2)를 같이 그려보기 | plot(x,y)와 points(x,y**2)를 같이 그려보기 | .",
            "url": "https://guebin.github.io/2021IR/2021/09/14/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9414%EC%9D%BC.html",
            "relUrl": "/2021/09/14/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9414%EC%9D%BC.html",
            "date": " • Sep 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "(2주차) 9월9일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/8): 과제제출 연장안내 . - (2/8): 아나콘다 설치 1 . - (3/8): 아나콘다 설치 2, 주피터랩을 사용하여 R실습해보기 . - (4/8): 변수이름 선언하기 . - (5/8): 변수이름 선언하는 팁 . - (6/8): 벡터선언하기 1 . - (7/8): 벡터선언하기 2, 함수선언 . - (8/8): 과제설명 . &#48320;&#49688;&#51060;&#47492;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . - 방법1 . d=1 . - 방법2 . e &lt;- 3 . &#51452;&#51032;&#54624;&#51216;: &#50424; &#49688; &#50630;&#45716; &#48320;&#49688;&#47749;&#51060; &#51080;&#45796;. . (1) 특수문자 불가능 . a! &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: unexpected &#39;!&#39; 1: a! ^ Traceback: . (2) 숫자로 시작하는 변수이름 불가능 . 2a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: unexpected symbol 1: 2a ^ Traceback: . a2 &lt;- 3 . 이것은 가능 (숫자로 시작되면 안되는 것이지 숫자를 포함하지 말라는 의미는 아님) | . (3) 띄어쓰기 불가능 . Guebin Choi &lt;- 33 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:8: unexpected symbol 1: Guebin Choi ^ Traceback: . this_is_333 &lt;- 333 . 띄어쓰기 대신 언더바(_)를 활용한다. | . this.is.777 &lt;- 777 . 언더바 말고 닷(.)을 선호하는 사람도 있다. | . (4) 언더바를 포함하는 것은 가능하지만, 언더바로 시작하는 변수명은 사용할 수 없다. ` . _x &lt;- 33 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: unexpected input 1: _ ^ Traceback: . (5) 사용할 수는 있지만 권장하지 않는 변수이름 . pi . 3.14159265358979 pi&lt;-333 . pi . 333 (6) 팁.. . - 변수를 축약할때 모음을 제외하면 좋다. . result -&gt; rslt | residual -&gt; rsdl | . - 임시로 변수명을 사용해야 할 경우: 변수이름 끝에 언더바를 붙인다. . x , y, rslt_, ... | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . - 방법1: 직접 입력 . v1&lt;-c(1,2,3,3,4,5,2) . print(v1) . [1] 1 2 3 3 4 5 2 . - 방법2: seq 를 이용 . v2&lt;-seq(from=0,to=10,by=0.1) . print(v2) . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . ?seq . seq {base} | R Documentation | . Sequence Generation . Description . Generate regular sequences. seq is a standard generic with a default method. seq.int is a primitive which can be much faster but has a few restrictions. seq_along and seq_len are very fast primitives for two common cases. . Usage . seq(...) ## Default S3 method: seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...) seq.int(from, to, by, length.out, along.with, ...) seq_along(along.with) seq_len(length.out) . Arguments . ... | arguments passed to or from methods. . | . from, to | the starting and (maximal) end values of the sequence. Of length 1 unless just from is supplied as an unnamed argument. . | . by | number: increment of the sequence. . | . length.out | desired length of the sequence. A non-negative number, which for seq and seq.int will be rounded up if fractional. . | . along.with | take the length from the length of this argument. . | . Details . Numerical inputs should all be finite (that is, not infinite, NaN or NA). . The interpretation of the unnamed arguments of seq and seq.int is not standard, and it is recommended always to name the arguments when programming. . seq is generic, and only the default method is described here. Note that it dispatches on the class of the first argument irrespective of argument names. This can have unintended consequences if it is called with just one argument intending this to be taken as along.with: it is much better to use seq_along in that case. . seq.int is an internal generic which dispatches on methods for &quot;seq&quot; based on the class of the first supplied argument (before argument matching). . Typical usages are . seq(from, to) seq(from, to, by= ) seq(from, to, length.out= ) seq(along.with= ) seq(from) seq(length.out= ) . The first form generates the sequence from, from+/-1, ..., to (identical to from:to). . The second form generates from, from+by, ..., up to the sequence value less than or equal to to. Specifying to - from and by of opposite signs is an error. Note that the computed final value can go just beyond to to allow for rounding error, but is truncated to to. (&lsquo;Just beyond&rsquo; is by up to 1e-10 times abs(from - to).) . The third generates a sequence of length.out equally spaced values from from to to. (length.out is usually abbreviated to length or len, and seq_len is much faster.) . The fourth form generates the integer sequence 1, 2, ..., length(along.with). (along.with is usually abbreviated to along, and seq_along is much faster.) . The fifth form generates the sequence 1, 2, ..., length(from) (as if argument along.with had been specified), unless the argument is numeric of length 1 when it is interpreted as 1:from (even for seq(0) for compatibility with S). Using either seq_along or seq_len is much preferred (unless strict S compatibility is essential). . The final form generates the integer sequence 1, 2, ..., length.out unless length.out = 0, when it generates integer(0). . Very small sequences (with from - to of the order of 10^{-14} times the larger of the ends) will return from. . For seq (only), up to two of from, to and by can be supplied as complex values provided length.out or along.with is specified. More generally, the default method of seq will handle classed objects with methods for the Math, Ops and Summary group generics. . seq.int, seq_along and seq_len are primitive. . Value . seq.int and the default method of seq for numeric arguments return a vector of type &quot;integer&quot; or &quot;double&quot;: programmers should not rely on which. . seq_along and seq_len return an integer vector, unless it is a long vector when it will be double. . References . Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole. . See Also . The methods seq.Date and seq.POSIXt. . :, rep, sequence, row, col. . Examples . seq(0, 1, length.out = 11) seq(stats::rnorm(20)) # effectively &#39;along&#39; seq(1, 9, by = 2) # matches &#39;end&#39; seq(1, 9, by = pi) # stays below &#39;end&#39; seq(1, 6, by = 3) seq(1.575, 5.125, by = 0.05) seq(17) # same as 1:17, or even better seq_len(17) . . [Package base version 4.0.5 ] print(seq(from=0, to=1, length.out = 27)) . [1] 0.00000000 0.03846154 0.07692308 0.11538462 0.15384615 0.19230769 [7] 0.23076923 0.26923077 0.30769231 0.34615385 0.38461538 0.42307692 [13] 0.46153846 0.50000000 0.53846154 0.57692308 0.61538462 0.65384615 [19] 0.69230769 0.73076923 0.76923077 0.80769231 0.84615385 0.88461538 [25] 0.92307692 0.96153846 1.00000000 . - 방법3: : 를 이용 . v3 &lt;- 1:22 . print(v3) . [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 . 이 방법을 살짝 응용하면 0~1까지 57개의 변수를 넣는 방법을 아래와 같이 할 수 있다. . print(0:56 / 56) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . 물론 아래와 같이하는것이 더 가독성이 좋다. . print(seq(from=0,to=1,length.out =57)) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . - 방법4: rep를 이용 . print(rep(0,100)) . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . &#54632;&#49688;&#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - 기본 구조 . 함수이름 &lt;- function(입력){ 함수의 기능 return(출력) } . f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) } . f(8) . 1 - 아래의 2개의 코드는 거의 같다. . ### 1 f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) } f(8) ### 2 d=8 I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id . 1 - return을 생략해도 괜찮다. . f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id y } f(8) . 1 &#49689;&#51228; . - 주피터랩으로 R실습할 수 있는 환경을 설정 .",
            "url": "https://guebin.github.io/2021IR/2021/09/09/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%949%EC%9D%BC.html",
            "relUrl": "/2021/09/09/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%949%EC%9D%BC.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "(1주차) 9월7일",
            "content": "&#44053;&#51032;&#50689;&#49345; . - (1/2): 2005년 예비평가(나) 12월/평가원26(고3) 첫번째 풀이 . - (2/2): 2005년 예비평가(나) 12월/평가원26(고3) 다양한 풀이 + 과제설명 . . R&#51008; &#51339;&#51008; &#44228;&#49328;&#44592; &#51060;&#45796;. . 2005&#45380; &#50696;&#48708;&#54217;&#44032;(&#45208;) 12&#50900;/&#54217;&#44032;&#50896;26(&#44256;3) . 어떤 호수에서 수면에서의 빛의 세기가 $I_0$일 때, 수면이 $d$m인 곳에서의 빛의 세기 $I_d$는 다음과 같이 나타내어진다고 한다. . $$I_d=I_0 2^{-0.25d}$$ . 이 호수에서 빛의 세기가 수면에서의 빛의 세기의 25%인 곳의 수심은? (3점) . (1) 16m . (2) 12m . (3) 10m . (4) 8m . (5) 4m . (풀이1) . I0=1 d=8 Id=I0*0.25 . I0*2^(-0.25*d) ## 0.25 랑 비슷하면 된다. 현재는 Id=0.25니까.. . 0.25 (풀이2) . d=8 y=I0*2^(-0.25*d)/Id print(y) . [1] 1 . - $y=1$이 나오는 $d$를 찾아보면된다. $ to$ 찾아보니까 $d=8$ . (풀이3) . - 함수라는걸 만들어보자. . - $d$를 입력하면, 알아서 $y$가 계산되면 좋겠다. . $$y=f(d)$$ . f&lt;-function(d){ y=I0*2^(-0.25*d)/Id y } . - $y=f(d)= frac{I_0 2^{-0.25 d}}{I_d}$ 를 함수를 만들자. . - $y=1$이 되는 $d$를 찾아보자. 그러면 답이다. . f(8) . 1 - $d=8$이 답이다. . (풀이4) . - $(d,f(d))$ 혹은 $(d,y)$를 그래프로 그려보자. . d&lt;-c(1,2,3) . d&lt;-seq(from=0,to=10,by=0.01) . y=I0*2^(-0.25*d)/Id . plot(d,y) . plot(d,y) abline(h=1,col=2,lwd=5,lty=3) . (풀이5) . x_&lt;-c(1,2,3,2,5) . print(x_ == 3) . [1] FALSE FALSE TRUE FALSE FALSE . d[y==1] . 8 &#49689;&#51228; . - 아래그림에서 수평선의 위치를 $y=2$로 조정하여 그려볼것 . plot(d,y) abline(h=1.1,col=2,lwd=5,lty=3) .",
            "url": "https://guebin.github.io/2021IR/2021/09/07/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%947%EC%9D%BC.html",
            "relUrl": "/2021/09/07/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%947%EC%9D%BC.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "(1주차) 9월2일",
            "content": "&#44053;&#51032;&#50689;&#49345; . - (1/3): R소개 , R을 활용한 간단한 계산 . - (2/3): 통계학과 진로, 통계학과의 장점, 강의계획안내 . - (3/3): R설치방법, 과제안내 . . &#47112;&#54252;&#53944; . - 카카오톡 스샷제출 .",
            "url": "https://guebin.github.io/2021IR/2021/09/02/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%942%EC%9D%BC.html",
            "relUrl": "/2021/09/02/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%942%EC%9D%BC.html",
            "date": " • Sep 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/2021IR/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0-Copy1.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0-Copy1.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널 1 | . 2021년 2학기 종료후 폐쇄예정 &#8617; . |",
          "url": "https://guebin.github.io/2021IR/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/2021IR/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}