{
  
    
        "post0": {
            "title": "(4주차) 9월30일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/1) if문 . - (2/4) if - else 문 . - (3/4) 중첩 (1) . - (4/4) 중첩 (2), 과제설명 . if . - 아래와 같이 if (조건문) 표현식의 형태로 사용한다. (표현식은 컴퓨터에게 내가 내리는 명령어이다) . a= 2 if (a&gt;0) print(&#39;a는 양수&#39;) . [1] &#34;a는 양수&#34; . - space를 임의로 넣어도 상관없다. . a=10 if (a&gt;0) print(&#39;a는 양수&#39;) . [1] &#34;a는 양수&#34; . a=10 if (a&gt;0) print(&#39;a는 양수&#39;) . [1] &#34;a는 양수&#34; . - enter를 넣어도 상관없긴하다. . a=10 if (a&gt;0) print(&#39;a는양수&#39;) . [1] &#34;a는양수&#34; . a=10 if (a&gt;0) print(&#39;a는양수&#39;) . [1] &#34;a는양수&#34; . a=10 if (a&gt;0) print(&#39;a는양수&#39;) . [1] &#34;a는양수&#34; . - 컴퓨터에게 내릴 명령이 2개이상일 경우? $ to$ {}을 이용한다. . &#51096;&#47803;&#46108;&#50696;&#51228; . a=10 if (a&gt;0) print(&#39;a는양수&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) . [1] &#34;a는양수&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 . a=-10 if (a&gt;0) print(&#39;a는양수&#39;) ## print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) . [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] -10 . 에러메시지가 뜨지는 않았지만 잘못된 코드이다. | . &#50732;&#48148;&#47480; &#49324;&#50857;&#48277;: {}&#47484; &#51060;&#50857;&#54616;&#50668; &#47749;&#47161;&#46308;&#51012; &#47926;&#45716;&#45796;. . a=10 if (a&gt;0){ print(&#39;a는양수&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) } . [1] &#34;a는양수&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 . a=-10 if (a&gt;0){ print(&#39;a는양수&#39;) ## print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) } . - 아래와 같이 중괄호를 묶어도 상관없다. . a=10 if (a&gt;0) { print(&#39;a는양수&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) } . [1] &#34;a는양수&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 . a=10 if (a&gt;0) { print(&#39;a는양수&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a)} . [1] &#34;a는양수&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 . a=10 if (a&gt;0){ print(&#39;a는양수&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) } . [1] &#34;a는양수&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 . 위와같이 코드를 작성하면 안된다. | . - if (조건문) 표현식 . a=c(10,-10) a . [1] 10 -10 . a&gt;0 . [1] TRUE FALSE . 이 문장이 참일까 거짓일까? $ to$ R은 첫번째 원소가 참이면 참이라고 판단한다. | . a=c(10,-10) if (a&gt;0){ print(&#39;a는 양수이다&#39;) print(&#39;양수인 a의 값은 아래와 같다.&#39;) print(a) } . Warning message in if (a &gt; 0) {: “the condition has length &gt; 1 and only the first element will be used” . [1] &#34;a는 양수이다&#34; [1] &#34;양수인 a의 값은 아래와 같다.&#34; [1] 10 -10 . 이러한 코드를 작성하지 말자. | . if~else . - 아래와 같이 if (조건문) 표현식1 else 표현식2의 형태로 실행한다. . x=2 if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] 0.6931472 . x=1 if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] 0 . x=0 if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] &#34;x는양수이어야함&#34; . x=-1 if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] &#34;x는양수이어야함&#34; . - if 문과 if~else 문은 다른기능이다. . x=10 if (x&gt;0) log(x) else print(&#39;x는 양수이어야함&#39;) . Error in parse(text = x, srcfile = src): &lt;text&gt;:4:1: unexpected &#39;else&#39; 3: log(x) 4: else ^ Traceback: . ?? 왜 에러가 나는가? | . - 아래는 잘 실행된다. . if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] &#34;x는양수이어야함&#34; . if (x&gt;0) log(x) else print(&#39;x는양수이어야함&#39;) . [1] &#34;x는양수이어야함&#34; . - 보통은 아래와 같이 사용한다. . x=0 if(x&gt;0){ log(x) }else{ print(&#39;x는 양수이어야함&#39;) } . [1] &#34;x는 양수이어야함&#34; . - 결국 한줄에 다 말하거나, {}를 적절하게 활용하면 된다. . - 아래와 같은것들도 가능 . x=0 if (x&gt;0){ log(x) }else{ print(&#39;x는 양수이어야함&#39;) } . [1] &#34;x는 양수이어야함&#34; . - 아래는 불가능 (무조건 중괄호를 친다고 해결되는것이 아님) . x=0 if (x&gt;0){ log(x) } else{ print(&#39;x는 양수이어야함&#39;) } . Error in parse(text = x, srcfile = src): &lt;text&gt;:5:1: unexpected &#39;else&#39; 4: } 5: else ^ Traceback: . - 결국 아래와 같은 코드를 권장함. (주피터보다 Rstudio가 더 쓰기편하다) . x=0 if(x&gt;0){ log(x) }else{ print(&#39;x는 양수이어야함&#39;) } . [1] &#34;x는 양수이어야함&#34; . &#51473;&#52393; . - 예제시작 . x=10 if (x&gt;0){ print(log(x)) }else{ if(x==0){ x=1e-100 print(&#39;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#39;) log(x) }else{ print(&#39;x가음수입니다.&#39;) } } . [1] 2.302585 . x=0 if (x&gt;0){ print(log(x)) }else{ if(x==0){ x=1e-100 print(&#39;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#39;) log(x) }else{ print(&#39;x가음수입니다.&#39;) } } . [1] &#34;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#34; . [1] -230.2585 . x=-1 if (x&gt;0){ print(log(x)) }else{ if(x==0){ x=1e-100 print(&#39;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#39;) log(x) }else{ print(&#39;x가음수입니다.&#39;) } } . [1] &#34;x가음수입니다.&#34; . - 보통은 아래와 같이 함수 형태로 사용한다. (중괄호지옥 $ to$ Rstudio가 좀더 편리함) . mylogfun&lt;-function(x){ if (x&gt;0){ print(log(x)) }else{ if(x==0){ x=1e-100 print(&#39;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#39;) log(x) }else{ print(&#39;x가음수입니다.&#39;) } } } . mylogfun(0) . [1] &#34;x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.&#34; . [1] -230.2585 . &#49689;&#51228; . mysqrtfun()를 만들고 . (1) x&gt;=0 --&gt; sqrt(x) . (2) x&lt;0 --&gt; &#39;x는 양수이어야합니다&#39; . mysqrtfun(-2), mysqrtfun(2) 의 출력결과를 스크린샷으로 제출 .",
            "url": "https://guebin.github.io/2021IR/2021/09/30/(4%EC%A3%BC%EC%B0%A8)-9%EC%9B%9430%EC%9D%BC.html",
            "relUrl": "/2021/09/30/(4%EC%A3%BC%EC%B0%A8)-9%EC%9B%9430%EC%9D%BC.html",
            "date": " • Sep 30, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "(3주차) 9월28일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/2) for문, 2007(나) 6월 평가원 14 (고3) . - (2/2) 2007(나) 6월 평가원 14 (고3), 2004(인)/수능(홀) 19(고3), 2010(나)/수능(홀) 30(고3), if문 . for&#47928; . - 문제: 1~4까지 모두 더하면? . s=0 for(i in c(1,2,3,4)){ ## i=1,2,3,4에 대하여 아래를 반복하라. s=s+i ## 반복할 내용 } s . [1] 10 . - 위의 코드는 아래와 동일하다. . s=0 i=1 s=s+i i=2 s=s+i i=3 s=s+i i=4 s=s+i s . [1] 10 . 2007(&#45208;) 6&#50900;/&#54217;&#44032;&#50896; 14(&#44256;3) . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 $a$원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 2/3로 한다. . 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? (단, $1.08^{18}=4$로 계산한다) . (1) $ frac{101}{2}a$ . (2) $ frac{111}{2}a$ . (3) $ frac{121}{2}a$ . (4) $ frac{131}{2}a$ . (5) $ frac{141}{2}a$ . (풀이) . sal&lt;-c() sal[1]&lt;- 1 ## 첫해의 연봉은 1로 하자. . for(i in 2:19){ sal[i] = sal[i-1] * 1.08 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 . for(i in 20:28){ sal[i] = sal[19]*2/3 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 2.664013 2.664013 2.664013 2.664013 2.664013 [25] 2.664013 2.664013 2.664013 2.664013 . sum(sal) . [1] 65.42238 . c(101/2,111/2,121/2,131/2,141/2) . [1] 50.5 55.5 60.5 65.5 70.5 . 답은4번이다. . 2004(&#51064;)/&#49688;&#45733;(&#54848;) 19(&#44256;3) . 자료 $x_1,x_2, dots, x_{100}$에 대하여 다음 과정을 순서대로 시행하였다. . (가) 처음 두 수 $x_1$과 $x_2$의 평균을 구한다. . (나) $x_3$을 추가하여 $x_1, x_2, x_3$의 평균을 구한다. . (다) $x_4$을 추가하여 $x_1, x_2, x_3, x_4$의 평균을 구한다. . ... . $x_{100}$을 추가하여 $x_1, x_2, x_3 , dots , x_{100}$의 평균을 구한다. . 위의 과정을 시행할 결과, $x_1$과 $x_2$의 평균이 5이고, 자료 하나가 추가될때 마다 평균이 1씩 증가하였다. 이때 $x_{100}$의 값은? . (1) 194 . (2) 196 . (3) 198 . (4) 200 . (5) 202 . (풀이) . x&lt;-c() x[1]=5 x[2]=5 . for(n in 3:100){ temp_ = mean(x[1:(n-1)])+1 ## temp_ : 1~n까지의 평균 sum_ = temp_ * n # 1~n까지의 합 x[n] = sum_ - sum(x[1:(n-1)]) } . x . [1] 5 5 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 [19] 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 [37] 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 [55] 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 [73] 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 [91] 184 186 188 190 192 194 196 198 200 202 . 따라서 답은 5번 . 2010(&#45208;)/&#49688;&#45733;(&#54848;) 30(&#44256;3) . 수열 $ {a_n }$에 대하여 첫째항부터 제 $n$항까지의 합을 $S_n$이라고 하자. 수열 $ {S_{2n-1} }$은 공차가 -3인 등차수열이고, 수열 $ {S_{2n} }$은 공차가 2인 등차수열이다. $a_2=1$일 때, $a_8$의 값을 구하시오. . (풀이) . a&lt;-c() a[1]=222 # 첫째항은 222이라고 하자. a[2]=1 # 문제에서 a2=1이라고 하였음 . - $S_n$은 $n$이 짝수이냐, 홀수이냐에 따라서 정의가 달라짐 . $S_3=S_1-3$ . $S_5=S_3-3$ . ... . $S_4=S_2+2$ . $S_6=S_4+2$ . ... . S&lt;-c() S[1]=a[1] S[2]=a[1]+a[2] . (1:5) %% 3 . [1] 1 2 0 1 2 . n %% 2 . [1] 0 . for(n in 3:100){ ### n이 홀수라면?? (n %% 2)==1 if(n%%2 ==1){ S[n]=S[n-2]-3 }else{ ### n이 짝수라면?? (n%%2) == 0 S[n]=S[n-2]+2 } } . S . [1] 222 223 219 225 216 227 213 229 210 231 207 233 204 235 201 237 198 239 [19] 195 241 192 243 189 245 186 247 183 249 180 251 177 253 174 255 171 257 [37] 168 259 165 261 162 263 159 265 156 267 153 269 150 271 147 273 144 275 [55] 141 277 138 279 135 281 132 283 129 285 126 287 123 289 120 291 117 293 [73] 114 295 111 297 108 299 105 301 102 303 99 305 96 307 93 309 90 311 [91] 87 313 84 315 81 317 78 319 75 321 . S[8]-S[7] . [1] 16 . &#49689;&#51228; . - 2010(나)/수능(홀) 30(고3)의 문제풀이에서 a[1]의 값을 0, 222 이외의 값으로 설정하고 $a_8$을 구하라. .",
            "url": "https://guebin.github.io/2021IR/2021/09/28/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9428%EC%9D%BC.html",
            "relUrl": "/2021/09/28/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9428%EC%9D%BC.html",
            "date": " • Sep 28, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "(3주차) 9월16일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/2): 2010(나) 6월/평가원 4 (고3) . - (2/2): 2021(가) 9월/평가원 10 (고3), for문 . - 추가영상: 주피터랩, Rstudio . 2010(&#45208;) 6&#50900;/&#54217;&#44032;&#50896; 4 (&#44256;3) . (문제) 실수 $a$가 $ frac{2^a+2^{-a}}{2^{a}-2^{-a}}=-2$를 만족시킬때, $4^a+4^{-a}$의 값은? . (보기) (1) $ frac{5}{2}$ (2) $ frac{10}{3}$ (3) $ frac{17}{4}$ (4) $ frac{26}{5}$ (5) $ frac{37}{6}$ . (풀이) . - 먼저 $ frac{2^{a}+2^{-a}}{2^a-2^{-a}}=-2$를 만족하는 $a$를 찾아보자. . - $f(a)= frac{2^{a}+2^{-a}}{2^a-2^{-a}}$라고 두고 $f(a)=-2$를 만족하는 $a$를 찾으면 된다. . - 함수를 선언하자. . ### 이렇게 한다고 함수가 선언되지는 않는다. f(a) = (2^a + 2^(-a)) / (2^(a)-2^(-a)) . f&lt;-function(a){ (2^a + 2^(-a)) / (2^(a)-2^(-a)) } . - 잘 선언되었는지 확인: $a=1$을 넣으면 $f(a)= frac{2+0.5}{2-0.5}= frac{2.5}{1.5}$ . print(f(1)) print(2.5/1.5) . [1] 1.666667 [1] 1.666667 . 잘 선언된 것 같다. | . - $f(a)$의 그래프를 그리고 $f(a)=-2$에 해당하는 수평선을 그려서 대략적으로 값을 유추하여 보자. . a=seq(from=-5,to=5,by=0.1) . plot(a,f(a)) abline(h=-2,col=&#39;red&#39;) . - 우선 $-2 &lt; a&lt; 0$ 인 것 같다. 범위를 좁히고, by옵션을 사용하여 더 촘촘히 다시 그려보자. . a = seq(from=-2, to=0, by=0.0001) . plot(a,f(a)) abline(h=-2,col=&#39;red&#39;) . ?? | 함수모양을 보니 $a=0$이면 $f(a)$의 분모가 0이 되어서 정의되지 않음. | . - 범위를 $-2 &lt; a&lt; -0.1$ 로 수정해보자. . a = seq(from=-2, to=-0.1, by=0.0001) plot(a,f(a),type=&#39;l&#39;,lwd=4) abline(h=-2,col=2,lty=2,lwd=4) . col: 칼라조정 (2=빨강, &#39;red&#39;=빨강 // 4=파랑, &#39;blue&#39;=파랑) | lty: 점선의 type조정 | lwd: 선의 두께 조정 | . - 이제 해를 찾아보자. $f(a)=-2$를 찾아야 하므로 f(a)== -2를 조건식으로 걸자. . f(areached getOption(&#34;max.print&#34;) -- omitted 18001 entries ] . - 이중에 적당한 값이 있어야 한다. 보이진 않지만 (너무 많아서 눈으로 찾을수는 없지만) 어딘가에 TRUE가 하나는 있을것이다. . - TRUE가 있는지 체크할 수 있는 방법은 없을까? . . &#48372;&#52649;&#54617;&#49845;: &#52980;&#54504;&#53552;&#44032; TRUE, FALSE&#47484; &#51060;&#54644;&#54616;&#45716; &#48169;&#49885; . - 컴퓨터가 TRUE, FALSE를 1,0으로 각각 인식함. . - 아래 예제를 관찰 . TRUE + FALSE . [1] 1 . TRUE*2 . [1] 2 . TRUE+(FALSE-1) * 2 . [1] -1 . 2*c(TRUE, FALSE, TRUE) # 2*c(1,0,1) . [1] 2 0 2 . sum(c(TRUE,FALSE,TRUE)) . [1] 2 . . - 그럼 이제 f(a)==-2의 결과에서 TRUE가 진짜 있는지 찾아보자. . sum(f(a)==-2) . [1] 0 . - ??? 없음.. . - 사실 컴퓨터는 근사계산을 하였으므로 $f(a)=-2$인 $a$를 정확하게 찾기는 힘들다. 따라서 적당히 $f(a) approx -2$인 $a$를 찾는게 더 합리적이다. . - $f(a) approx -2 $ 인 $a$를 찾는건 $f(a)+2 approx 0$인 $a$를 찾는것과 같다. . - 목표: 즉 $f(a)+2$ 의 &quot;절대값&quot;이 0에 가까운 원소를 고르면 된다. . * 참고: 절대값을 구하는 방법 . abs(c(1,2,-2,3,-4)) . [1] 1 2 2 3 4 . - 위를 응용하면 . min(abs(f(a)+2)) # f(a)의 절대값중 가장 작은 값 . [1] 3.898777e-05 . - 이제 $a$는 아래와 같이 구할 수 있다. . TFarray &lt;- abs(f(a)+2) == min(abs(f(a)+2)) a[TFarray] . [1] -0.7925 . $a=-0.7925$ . - 따라서 $4^{a}+4^{-a}$는 . 4^(0.7925) + 4^(-0.7925) . [1] 3.333403 . (보기) (1) $ frac{5}{2}$ (2) $ frac{10}{3}$ (3) $ frac{17}{4}$ (4) $ frac{26}{5}$ (5) $ frac{37}{6}$ . 보기와 비교해보면 . c(5/2,10/3,17/4,26/5,37/6) . [1] 2.500000 3.333333 4.250000 5.200000 6.166667 . 따라서 답은 2번이다. . 2021(&#44032;) 9&#50900;/&#54217;&#44032;&#50896; 10(&#44256;3) . (문제) 수열 $ {a_n }$은 $a_1=12$이고, 모든 자연수 $n$에 대하여 $a_{n+1}+a_n=(-1)^{n+1} times n$을 만족시킨다. $a_k&gt; a_1$인 자연수 $k$의 최소값은? . (보기) (1) $2$ (2) $4$ (3) $6$ (4) $8$ (5) $10$ . (풀이1) . a1=12 n=1 a2= -a1 +(-1)^(n+1)*n n=2 a3= -a2 +(-1)^(n+1)*n . a3 . [1] 9 . 보기를 보니까 10이 최대값이므로 $a_{10}$까지만 구해보자. . a1=12 n=1 a2= -a1 +(-1)^(n+1)*n n=2 a3= -a2 +(-1)^(n+1)*n n=3 a4= -a3 +(-1)^(n+1)*n n=4 a5= -a4 +(-1)^(n+1)*n n=5 a6= -a5 +(-1)^(n+1)*n n=6 a7= -a6 +(-1)^(n+1)*n n=7 a8= -a7 +(-1)^(n+1)*n n=8 a9= -a8 +(-1)^(n+1)*n n=9 a10= -a9 +(-1)^(n+1)*n . a&lt;-c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . (1:10)[a&gt;12] . [1] 8 10 . 답은 (4) $8$ 이다. . (풀이2) . - 풀이2를 소개하기 전에 아래와 같이 벡터를 넣는 법을 생각하자. . * 예비학습 . a_ &lt;-c() . a_ . NULL . a_[1] &lt;- 12 . a_ . [1] 12 . a_[2] &lt;- -12 . a_ . [1] 12 -12 . a_[4] &lt;- 3 . a_ . [1] 12 -12 NA 3 . - 풀이시작 (for문) . a&lt;-c() . a[1] &lt;- 12 . ## 아래와 같은 코드를 구현하고 싶다. n=1~9 a_{n+1}= -a_n +(-1)^(n+1)*n . for(n in 1:19){ a[n+1]&lt;- -a[n]+(-1)^(n+1)*n } . print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 -43 54 -66 79 -93 [16] 108 -124 141 -159 178 . print((1:20)[a&gt;12]) . [1] 8 10 12 14 16 18 20 . 답은 (4) 8이다. . &#49689;&#51228; . - 2021(가) 9월/평가원 10(고3) 에 해당하는 수열을 40번째 항까지 구하라. .",
            "url": "https://guebin.github.io/2021IR/2021/09/16/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9416%EC%9D%BC.html",
            "relUrl": "/2021/09/16/(3%EC%A3%BC%EC%B0%A8)-9%EC%9B%9416%EC%9D%BC.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "(2주차) 9월14일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/1) 벡터의 원소를 뽑는법, 메인플랏과 서브플랏, 주석이용법 . &#48289;&#53552;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . x&lt;-c(1,2,-2,4,5,-5,6) x . [1] 1 2 -2 4 5 -5 6 . &#50896;&#49548;&#46308;&#51032; &#48264;&#54840;&#47484; &#48520;&#47084;&#49436; &#48977;&#50500;&#45240;&#45796;. . - 첫 원소를 뽑고싶다. . x[1] . [1] 1 . - 세번째 원소를 뽑고싶다. . x[3] . [1] -2 . - 첫번째부터 세번째까지의 원소를 뽑고싶다. . x[1:3] . [1] 1 2 -2 . x[c(1,2,3)] . [1] 1 2 -2 . - 2,5,6 번째의 원소를 뽑고싶다면? . x[c(2,5,6)] . [1] 2 5 -5 . - 3번째 원소를 제외하고 호출 . x[-3] . [1] 1 2 4 5 -5 6 . - 3,4번째의 원소를 제외하고 호출 . x[c(-3,-4)] . [1] 1 2 5 -5 6 . x[-(3:4)] . [1] 1 2 5 -5 6 . &#50612;&#46496;&#54620; &#51312;&#44148;&#51012; &#51452;&#44256;, &#44536; &#51312;&#44148;&#50640; &#47564;&#51313;&#54616;&#45716; &#50896;&#49548; (&#54841;&#51008; &#47564;&#51313;&#54616;&#51648; &#50506;&#45716; &#50896;&#49548;)&#47484; &#48977;&#45716;&#48277; . x&lt;-c(1,2,-2,4,5,-5,6) x . [1] 1 2 -2 4 5 -5 6 . - 양수인 원소를 뽑는법 . (1) 양수인지 스스로 판단 . (2) 양수라면 나간다. . x&gt;0 . [1] TRUE TRUE FALSE TRUE TRUE FALSE TRUE . - x&gt;0이 결과는 TRUE, FALSE가 포함된 벡터 . x[x&gt;0] . [1] 1 2 4 5 6 . - 3보다 큰 원소를 뽑는 방법 . x[x&gt;3] . [1] 4 5 6 . - 3번째 원소를 뽑아라. . array_ = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE) array_ . [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE . x[array_] . [1] -2 . - 값이 -2인 원소를 뽑아라. . x[x == -2] . [1] -2 . - 응용예제 . x&lt;- c(1,2,3,4,5) y&lt;- x^2 . x . [1] 1 2 3 4 5 . y . [1] 1 4 9 16 25 . $y=x^2=9$가 되도록 만드는 $x$를 알려줘! . x[y==9] . [1] 3 . &#44536;&#47548;&#51012; &#44536;&#47540; &#46412; &#44592;&#50613;&#54624; &#44163; . - 그림자체를 생성해주는 plot과 같은 명령이 있고, 생성된 그림에 덧붙여서만 그릴 수 있는 lines, points, abline 과 같은 함수가 있다. . - 생성된 그림에 덧붙여서 그릴 수 있는 함수들은 단독으로 쓸 수 없다. . x&lt;-1:60/10 x . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y&lt;-sin(x) y . [1] 0.09983342 0.19866933 0.29552021 0.38941834 0.47942554 0.56464247 [7] 0.64421769 0.71735609 0.78332691 0.84147098 0.89120736 0.93203909 [13] 0.96355819 0.98544973 0.99749499 0.99957360 0.99166481 0.97384763 [19] 0.94630009 0.90929743 0.86320937 0.80849640 0.74570521 0.67546318 [25] 0.59847214 0.51550137 0.42737988 0.33498815 0.23924933 0.14112001 [31] 0.04158066 -0.05837414 -0.15774569 -0.25554110 -0.35078323 -0.44252044 [37] -0.52983614 -0.61185789 -0.68776616 -0.75680250 -0.81827711 -0.87157577 [43] -0.91616594 -0.95160207 -0.97753012 -0.99369100 -0.99992326 -0.99616461 [49] -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744 -0.77276449 [55] -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666 -0.27941550 . - plot은 단독으로 그림을 만드는 함수, lines는 만들어진 그림에 덧붙이는 함수 . plot(x,y,type=&#39;l&#39;,col=&#39;red&#39;) lines(x,y^2,col=&#39;blue&#39;) . - lines를 먼저 사용하면 이미 만들어진 그림이 없는 상태이므로 error가 발생 . lines(x,y^2,type=&#39;l&#39;,col=&#39;red&#39;) plot(x,y,type=&#39;l&#39;,col=&#39;blue&#39;) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y^2, type = &#34;l&#34;, col = &#34;red&#34;) 2. lines.default(x, y^2, type = &#34;l&#34;, col = &#34;red&#34;) 3. plot.xy(xy.coords(x, y), type = type, ...) . - 다양한 명령어들 비교 . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 | plot(x,y)와 plot(x,y,col=&#39;red&#39;)를 비교해보기 | plot(x,y)와 lines(x,y**2)를 같이 그려보기 | plot(x,y)와 points(x,y**2)를 같이 그려보기 | . &#51452;&#49437;&#51060;&#50857;&#48169;&#48277; . - 사용법 . a&lt;- 1 a&lt;- a+1 a&lt;- a+1 print(a) . [1] 3 . a&lt;- 1 #a&lt;- a+1 a&lt;- a+1 print(a) . [1] 2 . - 왜 쓰는지? (1) 코드 test (2) 설명을 쓰고싶을때 . a&lt;- 1 # a에 1을 대입하라. #a&lt;- a+1 a&lt;- a+1 # a의 값을 1증가하라. print(a) . [1] 2 . &#49689;&#51228; . 아래의 4개중 하나를 골라 비교해보고 결과를 캡쳐하여 LMS에 제출 . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 | plot(x,y)와 plot(x,y,col=&#39;red&#39;)를 비교해보기 | plot(x,y)와 lines(x,y**2)를 같이 그려보기 | plot(x,y)와 points(x,y**2)를 같이 그려보기 | .",
            "url": "https://guebin.github.io/2021IR/2021/09/14/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9414%EC%9D%BC.html",
            "relUrl": "/2021/09/14/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%9414%EC%9D%BC.html",
            "date": " • Sep 14, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "(2주차) 9월9일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/8): 과제제출 연장안내 . - (2/8): 아나콘다 설치 1 . - (3/8): 아나콘다 설치 2, 주피터랩을 사용하여 R실습해보기 . - (4/8): 변수이름 선언하기 . - (5/8): 변수이름 선언하는 팁 . - (6/8): 벡터선언하기 1 . - (7/8): 벡터선언하기 2, 함수선언 . - (8/8): 과제설명 . &#48320;&#49688;&#51060;&#47492;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . - 방법1 . d=1 . - 방법2 . e &lt;- 3 . &#51452;&#51032;&#54624;&#51216;: &#50424; &#49688; &#50630;&#45716; &#48320;&#49688;&#47749;&#51060; &#51080;&#45796;. . (1) 특수문자 불가능 . a! &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: unexpected &#39;!&#39; 1: a! ^ Traceback: . (2) 숫자로 시작하는 변수이름 불가능 . 2a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: unexpected symbol 1: 2a ^ Traceback: . a2 &lt;- 3 . 이것은 가능 (숫자로 시작되면 안되는 것이지 숫자를 포함하지 말라는 의미는 아님) | . (3) 띄어쓰기 불가능 . Guebin Choi &lt;- 33 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:8: unexpected symbol 1: Guebin Choi ^ Traceback: . this_is_333 &lt;- 333 . 띄어쓰기 대신 언더바(_)를 활용한다. | . this.is.777 &lt;- 777 . 언더바 말고 닷(.)을 선호하는 사람도 있다. | . (4) 언더바를 포함하는 것은 가능하지만, 언더바로 시작하는 변수명은 사용할 수 없다. ` . _x &lt;- 33 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: unexpected input 1: _ ^ Traceback: . (5) 사용할 수는 있지만 권장하지 않는 변수이름 . pi . [1] 3.141593 . pi&lt;-333 . pi . [1] 333 . (6) 팁.. . - 변수를 축약할때 모음을 제외하면 좋다. . result -&gt; rslt | residual -&gt; rsdl | . - 임시로 변수명을 사용해야 할 경우: 변수이름 끝에 언더바를 붙인다. . x , y, rslt_, ... | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . - 방법1: 직접 입력 . c(1,2,3,3,4,5,2) . [1] 1 2 3 3 4 5 2 . - 방법2: seq 를 이용 . seq(from=0,to=10,by=0.1) # 0~10 까지 0.1의 간격으로 수열만들기 . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . seq(from=0, to=1, length.out = 27) # 0~1 까지 등간격으로 총 27개의 수열만들기 . [1] 0.00000000 0.03846154 0.07692308 0.11538462 0.15384615 0.19230769 [7] 0.23076923 0.26923077 0.30769231 0.34615385 0.38461538 0.42307692 [13] 0.46153846 0.50000000 0.53846154 0.57692308 0.61538462 0.65384615 [19] 0.69230769 0.73076923 0.76923077 0.80769231 0.84615385 0.88461538 [25] 0.92307692 0.96153846 1.00000000 . - 방법3: : 를 이용 . 1:22 . [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 . 이 방법을 살짝 응용하면 0~1까지 57개의 변수를 넣는 방법을 아래와 같이 할 수 있다. . print(0:56 / 56) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . 물론 아래와 같이하는것이 더 가독성이 좋다. . print(seq(from=0,to=1,length.out =57)) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . - 방법4: rep를 이용 . rep(0,100) . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . &#54632;&#49688;&#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - 기본 구조 . 함수이름 &lt;- function(입력){ 함수의 기능 return(출력) } . f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) } . f(8) . [1] 1 . - 아래의 2개의 코드는 거의 같다. . ### 1 f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id return(y) } f(8) ### 2 d=8 I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id . [1] 1 . - return을 생략해도 괜찮다. . f&lt;-function(d){ I0=1 Id=I0*0.25 y=I0*2^(-0.25*d)/Id y } f(8) . [1] 1 . &#49689;&#51228; . - 주피터랩으로 R실습할 수 있는 환경을 설정 .",
            "url": "https://guebin.github.io/2021IR/2021/09/09/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%949%EC%9D%BC.html",
            "relUrl": "/2021/09/09/(2%EC%A3%BC%EC%B0%A8)-9%EC%9B%949%EC%9D%BC.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "(1주차) 9월7일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/2): 2005년 예비평가(나) 12월/평가원26(고3) 첫번째 풀이 . - (2/2): 2005년 예비평가(나) 12월/평가원26(고3) 다양한 풀이 + 과제설명 . R&#51008; &#51339;&#51008; &#44228;&#49328;&#44592; &#51060;&#45796;. . 2005&#45380; &#50696;&#48708;&#54217;&#44032;(&#45208;) 12&#50900;/&#54217;&#44032;&#50896;26(&#44256;3) . 어떤 호수에서 수면에서의 빛의 세기가 $I_0$일 때, 수면이 $d$m인 곳에서의 빛의 세기 $I_d$는 다음과 같이 나타내어진다고 한다. . $$I_d=I_0 2^{-0.25d}$$ . 이 호수에서 빛의 세기가 수면에서의 빛의 세기의 25%인 곳의 수심은? (3점) . (1) 16m . (2) 12m . (3) 10m . (4) 8m . (5) 4m . (풀이1) . I0=1 d=8 Id=I0*0.25 . I0*2^(-0.25*d) ## 0.25 랑 비슷하면 된다. 현재는 Id=0.25니까.. . [1] 0.25 . (풀이2) . d=8 y=I0*2^(-0.25*d)/Id y . [1] 1 . - $y=1$이 나오는 $d$를 찾아보면된다. $ to$ 찾아보니까 $d=8$ . (풀이3) . - 함수라는걸 만들어보자. . - $d$를 입력하면, 알아서 $y$가 계산되면 좋겠다. . $$y=f(d)$$ . f&lt;-function(d){ y=I0*2^(-0.25*d)/Id y } . - $y=f(d)= frac{I_0 2^{-0.25 d}}{I_d}$ 를 함수를 만들자. . - $y=1$이 되는 $d$를 찾아보자. 그러면 답이다. . f(8) . [1] 1 . - $d=8$이 답이다. . (풀이4) . - $(d,f(d))$ 혹은 $(d,y)$를 그래프로 그려보자. . d&lt;-c(1,2,3) . d&lt;-seq(from=0,to=10,by=0.01) . y=I0*2^(-0.25*d)/Id . plot(d,y) . plot(d,y) abline(h=1,col=2,lwd=5,lty=3) . (풀이5) . x_&lt;-c(1,2,3,2,5) . x_ == 3 . [1] FALSE FALSE TRUE FALSE FALSE . d[y==1] . [1] 8 . &#49689;&#51228; . - 아래그림에서 수평선의 위치를 $y=2$로 조정하여 그려볼것 . plot(d,y) abline(h=1.1,col=2,lwd=5,lty=3) .",
            "url": "https://guebin.github.io/2021IR/2021/09/07/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%947%EC%9D%BC.html",
            "relUrl": "/2021/09/07/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%947%EC%9D%BC.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "(1주차) 9월2일",
            "content": "&#44053;&#51032;&#50689;&#49345; . . - (1/3): R소개 , R을 활용한 간단한 계산 . - (2/3): 통계학과 진로, 통계학과의 장점, 강의계획안내 . - (3/3): R설치방법, 과제안내 . &#47112;&#54252;&#53944; . - 카카오톡 스샷제출 .",
            "url": "https://guebin.github.io/2021IR/2021/09/02/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%942%EC%9D%BC.html",
            "relUrl": "/2021/09/02/(1%EC%A3%BC%EC%B0%A8)-9%EC%9B%942%EC%9D%BC.html",
            "date": " • Sep 2, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "(A1) 깃허브와 fastpages를 이용하여 블로그 개설하기",
            "content": "About this doc . - 본 포스트는 2021년 1학기 Python 입문 강의내용중 일부를 업로드 하였음. . - Github, fastpages를 사용하여 블로그를 개설하고 관리하는 방법에 대한 설명임. . .",
            "url": "https://guebin.github.io/2021IR/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0-Copy1.html",
            "relUrl": "/2021/08/17/(A1)-%EA%B9%83%ED%97%88%EB%B8%8C%EC%99%80-fastpages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0-Copy1.html",
            "date": " • Aug 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "최규빈 . guebin@jbnu.ac.kr | 자연과학대학교 본관 205호 | 카카오톡 오픈채널 1 | . 2021년 2학기 종료후 폐쇄예정 &#8617; . |",
          "url": "https://guebin.github.io/2021IR/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guebin.github.io/2021IR/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}